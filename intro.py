# import math # math.round()
# from math import ceil as c
# from math import *
from random import randrange
'''
a = 10
b = 5
print(a / b)
print(a // b)
print(float(a % 3), end=', ')
print('text', 5, sep='...')

name = input('Enter your name: ')
print('Hello, ' + name)
age = input('Your age: ')
print('Age:', int(age), type(age))
'''

# name = input('Enter your name: ')

# if name == 'Oleg':
#     print('Oleg the best!!!')
# elif name == 'Bogdar':
#     print('You are wonderful!!!')
# else:
#     print('Hello, ' + name)

# age = int(input())

# if 0 < age <= 18:
#     print('You are young')
# elif age <= 30 or age > 35:
#     print('Oleg')
# # not a !a

# i = 0
# while i <= 3:
#     print(i)
#     i += 1

# string = 'Hello, Oleg'
# for j in string: # for (let i = 0, i <= 10, i += 1)
#     print(j)

# for i in range(2, 20, 2):
#     print(i)

# for i in range(20, 2, -2):
#     print(i)

# улиточка Дима ползет вверх по веточке на n см в день, ночью Дима спит, поэтому 
# сползает по веточке вниз на m см. за сколько суток улиточка Дима полностью 
# заберется на верх веточки длиной x см.


# любитель геометрии Павел задал двоечнику Даниле задачу: 
# - вот тебе листок бумаги, Данила, размером n x m
# - и что мне с ним делать, Павел?
# - посчитай, сколько квадартов может получиться из этого листочка,  Данила, 
# если сторона квадрата будет равна самой короткой стороне листочка
# - ты адекватный, Павел, а ниче что....
# 20 х 8 -> 8 x 8 (1 s) 12 x 8 -> 8 x 8 (2s) 4 x 8 -> 8 x 8 (2s) 4 x 4 (1s) 4 x 4

def squares(n, m):
    mn = min(n, m)
    mx = max(n, m)
    count = 0
    while mn != 0:
        print(mx, mn, count)
        count += mx // mn
        mx %= mn # mx = mx % mn
        temp = mx
        mx = max(mx, mn)
        mn = min(temp, mn)
    return count

print(squares(8, 8))
def f_name(x: int, y: int) -> int:
    """Function multiply numbers"""
    print('function f_name')
    return x * y

f_name(2, 3)
# print(f_name)

def power(x, y=2):
    return x ** y

power(y=3, x=3)

def f_2(*args):
    print(args)
    print(type(args))

f_2(1, 2, 'text', False)

arr = [1, 2, 3]
first, *tail = arr
*tail2, last = arr
arr_2 = [1, 2, 3, 4, 5]
first_1, *tail, last_1 = arr_2
print(first_1, last_1)
print(tail, tail2)

def hello(**args):
    print('Hello,', args['name'])

hello(surname='Kulkov', name='Oleg')

def inter(name):
    print(f'Hello, {name}')

inter('Bogdar')

def f_3():
    pass

'''
дана шахматная доска
на вход функция принимает координаты двух клеток шахматной доски
определите, являются ли эти клетки клетками одного цвета (true/false)
'''

def complete_color(x_1, y_1, x_2, y_2):
    if (x_1 + y_1) % 2 == (x_2 + y_2) % 2:
        return True
    return False

'''
дана шахматная доска
дается две координаты клетки: начальная и конечная
определите, может ли конь попасть из начальной клетки в конечную за 1 ход
'''

# x y -> x1 y1
# 4 4 -> 3  6
# 4 4 -> 5  6
# 4 4 -> 3  2
# 4 4 -> 5  2
# 4 4 -> 2  5
# 4 4 -> 2  3
# 4 4 -> 6  5
# 4 4 -> 6  3

def horse(x_1, y_1, x_2, y_2):
    if (abs(x_1 - x_2) == 1 and abs(y_1 - y_2) == 2) or (abs(x_1 - x_2) == 2 and abs(y_1 - y_2) == 1):
        return True
    return False

'''
дана шоколадка размером n x m квадратиков
определите, можно ли разделив ее 1 раз вдоль или поперек получить кусочек,
состоящий ровно из k квадратиков
'''

# 8 x 5 4
# 8 x 5 6
# 8 x 5 10
# 8 x 5 12
# 8 x 5 16
# 8 x 5 30
# 8 x 5 50

'''
Илья Николаич плавает в бассейне размером n x m
Илья Николаич устал
Илья Николаич хочет жить
Илья Николаич находится на расстоянии x от одной из длинных стен (не обязательно ближайшей)
Илья Николаич находится на расстоянии y от одной из коротких стен (не обязательно ближайшей)
Илья Николаич не хочет оказаться на дне, сколько минимально метров нужно проплыть
Илье Николаичу, чтобы выжить
'''

'''
дано число n
выведите в терминал (выпуклый) треугольник из чисел от 1 до n 
пример:
n = 4
1
12
123
1234
123
12
1

1234
123
12
1
12
123
1234
'''

lst = list({1, 2, 3})
print(lst)
lst_2 = [1, 'text', True]

# генераторы списков
lst_3 = [0] * 5
print(lst_3)

lst_4 = [i for i in range(1, 6)]
print(lst_4)

lst_5 = [[1, 2, 3], [4, 5, 6]]
print(lst_5)

lst_6 = [[[k for k in range(4)] for i in range(3)] for j in range(3)]
print(lst_6)

lst_7 = list(map(int, '1 2 3 4 5'.split()))
print(len(lst_7))
print(min(lst_7))
print(max(lst_7))
print(sum(lst_7))
lst_7 = [str(i) for i in lst_7]
print(lst_7)
lst_7 = ', '.join(lst_7)
print(lst_7)

lst_8 = [randrange(1, 20) for i in range(10)]
print(lst_8)
print(lst_8[3])
print(lst_8[1:4])
print(lst_8[:4])
print(lst_8[::-2])

# Дан массив.
# Сначала выведите третий элемент этого массива.
print(lst_8[2])
# Во второй строке выведите предпоследний элемент этого массива.
print(lst_8[len(lst_8) - 2]); print(lst_8[-2])
# В третьей строке выведите первые пять элементов этого массива.
print(lst_8[:5])
# В четвертой строке выведите весь массив, кроме последних двух элементов.
print(lst_8[:-2])
# В пятой строке выведите все элементы с четными индексами (считая, что индексация начинается с 0, поэтому элементы выводятся начиная с первого).
print(lst_8[::2])
# В шестой строке выведите все элементы с нечетными индексами, то есть начиная со второго элемента массива.
print(lst_8[1::2])
# В седьмой строке выведите все элементы в обратном порядке.
print(lst_8[::-1])
# В восьмой строке выведите все элементы массива через один в обратном порядке, начиная с последнего.
print(lst_8[::-2])
# В девятой строке выведите длину данного массива.
print(len(lst_8))

lst_8.sort()
# sorted(lst_8)
print(lst_8)

print(10 not in lst_8)

lst_9 = [3] * 3
lst_9.append(10)
lst_9.insert(2, 12)
deleted = lst_9.pop(2)
lst_9.remove(3)
print(lst_9.index(3), lst_9.count(3))
print(deleted)
print(lst_9)

'''
Артем Гончаров решил вдруг пойти на физру
Игорь Андреевич (уважаемый) построил всю группу в шеренгу
Артем, естественно, не знает, что такое шеренга и где ему встать
Часики тикают и у Артема есть 10 секунд, чтобы найти свое место в жизни и шеренге
На вход функция получает количество студентов на паре, а затем рост каждого из них
(не обязательно в порядке возрастания), а затем рост Артема (+-136 см)
В качестве ответа функция возвращает позицию Артема в шеренге слева направо
Если рост Артема совпадает с чьим-либо ростом, то Артем встает за этим человеком
'''

'''
Денис идет в боулинг, покатать шары
Денис (возможно) хорош в боулинге
На дорожке стоит N кеглей, а Денис делает k бросков, каждый из которых сбивает кегли с l по r
На вход функция получает N и k, а затем k номеров от l до r
Пример:
n k
10 3

8 10
2 5
3 6

Вывод:
I.....I...
'''

# множества
lst_test = [2, 2, 3, 2, 1, 5, 6, 6, 6, 6]
st = set(lst_test)
print(st)
st_2 = set('asdasdasdasd')
print(len(st_2))
st_2.add('p')
print(st_2)

st_2.discard('k')
# st_2.remove('k')
st_2.pop()

st_3 = {1, 2, 3, 4, 5}
st_4 = {3, 4, 5, 6, 7}
st_5 = {3, 5, 6}
# ls_1 = [1, 2, 3]
# ls_2 = [1, 3, 5]
# print(ls_1 | ls_2)
print(st_3 | st_4) # a.union(b)
print(st_3 & st_4) # a.intersection(b)
print(st_3 - st_4)
print(st_4 - st_3)
print(st_3 ^ st_4)
print(st_5 <= st_3)
print(st_5 <= st_4)

# напишите лямбда функцию, которая принимает на вход строку и возвращает количество уникальных
# в ней элементов
uniq = lambda string: len(set(string))

# напишите лямбда функцию, которая принимает на вход две строки и возвращает общие элем
# в порядке возрастания
common = lambda string_1, string_2: sorted(list(set(string_1) & set(string_2)))
print(common('123a', '234ab'))

# напишите функцию, которая принимает на вход последовательность элем
# в качестве ответа функция возвращает последовательность N и Y, в зависимости от того
# встречался элемент в последовательности или нет
# 1 2 3 a s 1 2
# N N N N N Y Y


'''
В первой строке задано количество школьников. 
Для каждого из школьников сперва записано количество языков, которое он знает, 
а затем - названия языков, по одному в строке.

В первой строке выведите количество языков, которые знают все школьники. 
Начиная со второй строки - список таких языков. 
Затем - количество языков, которые знает хотя бы один школьник, 
на следующих строках - список таких языков. Языки нужно выводить в лексикографическом порядке, 
по одному на строке.
вход:
3
Russian English Japanese
Russian English
English

выход:
1
English
3
English Japanese Russian
'''
# лямбда функции
power = lambda x, y: x ** y
print(power(3, 3))

shkolniki = [input().split(' ') for i in range(int(input()))]
print(shkolniki)